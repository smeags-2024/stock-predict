name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

# Add permissions for the workflow to write to the repository
permissions:
  contents: write
  pull-requests: read
  security-events: write

env:
  BUILD_TYPE: Release
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"

jobs:
  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Install clang-format and clang-tidy
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format clang-tidy
    
    - name: Format code automatically
      run: |
        find src include tests -name '*.cpp' -o -name '*.hpp' -o -name '*.h' | xargs clang-format -i
        
    - name: Check for formatting changes and commit if needed
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        if [[ -n $(git status --porcelain) ]]; then
          echo "Code formatting changes detected - committing..."
          git add .
          git commit -m "Auto-format code with clang-format
          
          - Applied consistent C++ formatting across all source files
          - Fixed clang-format violations in test files
          - Updated formatting to match project style guide"
          git push origin HEAD:${{ github.ref_name }}
          echo "✅ Code has been automatically formatted and committed"
        else
          echo "✅ No formatting changes needed - code is already properly formatted"
        fi
    
    - name: Setup Python for Conan
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Conan
      run: |
        pip install conan
        conan profile detect --force
        
    - name: Show Conan profile (for debugging)
      run: |
        conan profile show default
    
    - name: Install dependencies with Conan
      run: |
        mkdir -p build
        cd build
        conan install .. --build=missing -s build_type=Release -s compiler.cppstd=20
    
    - name: Run clang-tidy (skip if dependencies missing)
      run: |
        if cmake -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON; then
          echo "CMake configuration successful, running clang-tidy..."
          find src -name '*.cpp' | xargs clang-tidy -p build || echo "⚠️ clang-tidy found issues but continuing build..."
        else
          echo "⚠️ CMake configuration failed - skipping clang-tidy for now"
          echo "This is expected until all dependencies are properly configured"
        fi

  # Build and test matrix
  build-test:
    needs: code-quality
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        compiler: [gcc-11, gcc-12, clang-14, clang-15]
        build_type: [Debug, Release]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: ubuntu-20.04
            compiler: clang-15
          - os: ubuntu-20.04
            compiler: gcc-12
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache Conan packages
      uses: actions/cache@v3
      with:
        path: ${{ env.CONAN_USER_HOME }}
        key: conan-${{ matrix.os }}-${{ matrix.compiler }}-${{ hashFiles('conanfile.txt') }}
        restore-keys: |
          conan-${{ matrix.os }}-${{ matrix.compiler }}-
          conan-${{ matrix.os }}-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          pkg-config \
          libssl-dev \
          libblas-dev \
          liblapack-dev \
          libeigen3-dev \
          libhdf5-dev \
          libomp-dev \
          xvfb \
          libxkbcommon-x11-0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxcb-xfixes0 \
          x11-utils
    
    - name: Setup compiler
      run: |
        if [[ "${{ matrix.compiler }}" == gcc-* ]]; then
          version=${COMPILER#gcc-}
          sudo apt-get install -y gcc-$version g++-$version
          echo "CC=gcc-$version" >> $GITHUB_ENV
          echo "CXX=g++-$version" >> $GITHUB_ENV
        elif [[ "${{ matrix.compiler }}" == clang-* ]]; then
          version=${COMPILER#clang-}
          sudo apt-get install -y clang-$version
          echo "CC=clang-$version" >> $GITHUB_ENV
          echo "CXX=clang++-$version" >> $GITHUB_ENV
        fi
      env:
        COMPILER: ${{ matrix.compiler }}
    
    - name: Install Python and Conan
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Conan
      run: |
        pip install "conan>=2.0"
        conan profile detect --force
    
    - name: Install dependencies with Conan
      run: |
        mkdir -p build
        cd build
        conan install .. --build=missing -s build_type=${{ matrix.build_type }} -s compiler.cppstd=20
    
    - name: Configure CMake
      run: |
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
          -G Ninja
    
    - name: Build
      run: |
        cd build
        ninja -j$(nproc)
    
    - name: Run unit tests
      run: |
        cd build
        ctest --output-on-failure --parallel $(nproc)
    
    - name: Test GUI components (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd build
        # Run GUI tests in virtual framebuffer
        xvfb-run -a ./bin/StockPredict_gui --test-mode
    
    - name: Run integration tests
      run: |
        cd build
        # Run additional integration tests
        ./bin/StockPredict --test --symbol=AAPL --model=ensemble --epochs=1
    
    - name: Run benchmarks (Release only)
      if: matrix.build_type == 'Release'
      run: |
        cd build
        ./bin/run_benchmarks --benchmark_format=json --benchmark_out=benchmark_results.json
    
    - name: Upload benchmark results
      if: matrix.build_type == 'Release' && matrix.compiler == 'gcc-11'
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results-${{ matrix.os }}
        path: build/benchmark_results.json

  # Memory and sanitizer tests
  sanitizer-tests:
    needs: code-quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sanitizer: [address, thread, undefined]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          clang-14 \
          pkg-config \
          libssl-dev
    
    - name: Setup Python and Conan
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Conan
      run: |
        pip install "conan>=2.0"
        conan profile detect --force
    
    - name: Install dependencies
      run: |
        mkdir -p build
        cd build
        conan install .. --build=missing -s build_type=Debug -s compiler.cppstd=20
    
    - name: Configure with sanitizer
      run: |
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake \
          -DCMAKE_CXX_COMPILER=clang++-14 \
          -DCMAKE_C_COMPILER=clang-14 \
          -DCMAKE_CXX_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer" \
          -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=${{ matrix.sanitizer }}" \
          -G Ninja
    
    - name: Build
      run: |
        cd build
        ninja -j$(nproc)
    
    - name: Run tests with sanitizer
      run: |
        cd build
        ctest --output-on-failure
      env:
        ASAN_OPTIONS: detect_leaks=1:abort_on_error=1
        TSAN_OPTIONS: abort_on_error=1
        UBSAN_OPTIONS: abort_on_error=1

  # Performance regression tests
  performance-tests:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for comparison
    
    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build
    
    - name: Setup Python and Conan
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Conan
      run: |
        pip install "conan>=2.0"
        conan profile detect --force
    
    - name: Build current version
      run: |
        mkdir -p build-current
        cd build-current
        conan install .. --build=missing -s build_type=Release -s compiler.cppstd=20
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -G Ninja
        ninja -j$(nproc)
        ./bin/run_benchmarks --benchmark_format=json --benchmark_out=current_bench.json
    
    - name: Build baseline version
      run: |
        git checkout origin/main
        mkdir -p build-baseline
        cd build-baseline
        conan install .. --build=missing -s build_type=Release -s compiler.cppstd=20
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -G Ninja
        ninja -j$(nproc)
        ./bin/run_benchmarks --benchmark_format=json --benchmark_out=baseline_bench.json
    
    - name: Compare performance
      run: |
        python scripts/compare_benchmarks.py \
          build-baseline/baseline_bench.json \
          build-current/current_bench.json \
          --threshold 0.05  # 5% regression threshold

  # Documentation build
  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz
    
    - name: Setup Python for Conan
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Conan
      run: |
        pip install conan
        conan profile detect --force
        conan profile show default
    
    - name: Install dependencies with Conan
      run: |
        mkdir -p build
        cd build
        conan install .. --build=missing -s build_type=Release -s compiler.cppstd=20
    
    - name: Build documentation
      run: |
        cd build
        cmake .. -DBUILD_DOCS=ON
        make docs
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/docs/html

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Release build
  release:
    needs: [build-test, sanitizer-tests, documentation]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build
    
    - name: Setup Python and Conan
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Conan
      run: |
        pip install "conan>=2.0"
        conan profile detect --force
    
    - name: Build release
      run: |
        mkdir -p build
        cd build
        conan install .. --build=missing -s build_type=Release -s compiler.cppstd=20
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -G Ninja
        ninja -j$(nproc)
        cpack
    
    - name: Create release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: build/*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
